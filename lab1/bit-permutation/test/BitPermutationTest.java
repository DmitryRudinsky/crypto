import java.util.Arrays;

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ç–æ–≤.
 */
public class BitPermutationTest {
    
    public static void main(String[] args) {
        System.out.println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏—Ç–æ–≤ ===\n");
        
        int passed = 0;
        int failed = 0;
        
        // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≤–µ—Ä—Å–∏—è –±–∏—Ç–æ–≤ (MSB —Ä–µ–∂–∏–º)
        try {
            byte[] data1 = {(byte) 0b11001010};
            int[] pBlock1 = {7, 6, 5, 4, 3, 2, 1, 0};
            byte[] expected1 = {(byte) 0b01010011};
            byte[] result1 = BitPermutation.permutateBits(
                data1, pBlock1, BitIndexMode.INVERTED, true
            );
            
            if (Arrays.equals(result1, expected1)) {
                System.out.println("‚úì –¢–µ—Å—Ç 1 (—Ä–µ–≤–µ—Ä—Å–∏—è MSB): PASSED");
                System.out.printf("  –í—Ö–æ–¥:  %s%n", toBinaryString(data1));
                System.out.printf("  –í—ã—Ö–æ–¥: %s%n", toBinaryString(result1));
                passed++;
            } else {
                System.out.println("‚úó –¢–µ—Å—Ç 1 (—Ä–µ–≤–µ—Ä—Å–∏—è MSB): FAILED");
                System.out.printf("  –û–∂–∏–¥–∞–ª–æ—Å—å: %s%n", toBinaryString(expected1));
                System.out.printf("  –ü–æ–ª—É—á–µ–Ω–æ:  %s%n", toBinaryString(result1));
                failed++;
            }
        } catch (Exception e) {
            System.out.println("‚úó –¢–µ—Å—Ç 1: FAILED —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            failed++;
        }
        System.out.println();
        
        // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≤–µ—Ä—Å–∏—è –±–∏—Ç–æ–≤ (LSB —Ä–µ–∂–∏–º)
        try {
            byte[] data2 = {(byte) 0b11001010};
            int[] pBlock2 = {7, 6, 5, 4, 3, 2, 1, 0};
            byte[] expected2 = {(byte) 0b01010011};
            byte[] result2 = BitPermutation.permutateBits(
                data2, pBlock2, BitIndexMode.NORMAL, true
            );
            
            if (Arrays.equals(result2, expected2)) {
                System.out.println("‚úì –¢–µ—Å—Ç 2 (—Ä–µ–≤–µ—Ä—Å–∏—è LSB): PASSED");
                System.out.printf("  –í—Ö–æ–¥:  %s%n", toBinaryString(data2));
                System.out.printf("  –í—ã—Ö–æ–¥: %s%n", toBinaryString(result2));
                passed++;
            } else {
                System.out.println("‚úó –¢–µ—Å—Ç 2 (—Ä–µ–≤–µ—Ä—Å–∏—è LSB): FAILED");
                System.out.printf("  –û–∂–∏–¥–∞–ª–æ—Å—å: %s%n", toBinaryString(expected2));
                System.out.printf("  –ü–æ–ª—É—á–µ–Ω–æ:  %s%n", toBinaryString(result2));
                failed++;
            }
        } catch (Exception e) {
            System.out.println("‚úó –¢–µ—Å—Ç 2: FAILED —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            failed++;
        }
        System.out.println();
        
        // –¢–µ—Å—Ç 3: –ò–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try {
            byte[] data3 = {(byte) 0b10101010};
            int[] pBlock3 = {0, 1, 2, 3, 4, 5, 6, 7};
            byte[] expected3 = {(byte) 0b10101010};
            byte[] result3 = BitPermutation.permutateBits(
                data3, pBlock3, BitIndexMode.INVERTED, true
            );
            
            if (Arrays.equals(result3, expected3)) {
                System.out.println("‚úì –¢–µ—Å—Ç 3 (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å): PASSED");
                System.out.printf("  –í—Ö–æ–¥:  %s%n", toBinaryString(data3));
                System.out.printf("  –í—ã—Ö–æ–¥: %s%n", toBinaryString(result3));
                passed++;
            } else {
                System.out.println("‚úó –¢–µ—Å—Ç 3 (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å): FAILED");
                System.out.printf("  –û–∂–∏–¥–∞–ª–æ—Å—å: %s%n", toBinaryString(expected3));
                System.out.printf("  –ü–æ–ª—É—á–µ–Ω–æ:  %s%n", toBinaryString(result3));
                failed++;
            }
        } catch (Exception e) {
            System.out.println("‚úó –¢–µ—Å—Ç 3: FAILED —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            failed++;
        }
        System.out.println();
        
        // –¢–µ—Å—Ç 4: –ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤—É—Ö –±–∞–π—Ç–æ–≤
        try {
            byte[] data4 = {(byte) 0b11110000, (byte) 0b00001111};
            int[] pBlock4 = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
            byte[] expected4 = {(byte) 0b11110000, (byte) 0b00001111};
            byte[] result4 = BitPermutation.permutateBits(
                data4, pBlock4, BitIndexMode.INVERTED, true
            );
            
            if (Arrays.equals(result4, expected4)) {
                System.out.println("‚úì –¢–µ—Å—Ç 4 (–¥–≤–∞ –±–∞–π—Ç–∞): PASSED");
                System.out.printf("  –í—Ö–æ–¥:  %s%n", toBinaryString(data4));
                System.out.printf("  –í—ã—Ö–æ–¥: %s%n", toBinaryString(result4));
                passed++;
            } else {
                System.out.println("‚úó –¢–µ—Å—Ç 4 (–¥–≤–∞ –±–∞–π—Ç–∞): FAILED");
                System.out.printf("  –û–∂–∏–¥–∞–ª–æ—Å—å: %s%n", toBinaryString(expected4));
                System.out.printf("  –ü–æ–ª—É—á–µ–Ω–æ:  %s%n", toBinaryString(result4));
                failed++;
            }
        } catch (Exception e) {
            System.out.println("‚úó –¢–µ—Å—Ç 4: FAILED —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            failed++;
        }
        System.out.println();
        
        // –¢–µ—Å—Ç 5: –ù—É–º–µ—Ä–∞—Ü–∏—è —Å 1 (–Ω–µ —Å 0)
        try {
            byte[] data5 = {(byte) 0b11001010};
            int[] pBlock5 = {8, 7, 6, 5, 4, 3, 2, 1}; // –ò–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
            byte[] expected5 = {(byte) 0b01010011};
            byte[] result5 = BitPermutation.permutateBits(
                data5, pBlock5, BitIndexMode.INVERTED, false
            );
            
            if (Arrays.equals(result5, expected5)) {
                System.out.println("‚úì –¢–µ—Å—Ç 5 (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1): PASSED");
                System.out.printf("  –í—Ö–æ–¥:  %s%n", toBinaryString(data5));
                System.out.printf("  –í—ã—Ö–æ–¥: %s%n", toBinaryString(result5));
                passed++;
            } else {
                System.out.println("‚úó –¢–µ—Å—Ç 5 (–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1): FAILED");
                System.out.printf("  –û–∂–∏–¥–∞–ª–æ—Å—å: %s%n", toBinaryString(expected5));
                System.out.printf("  –ü–æ–ª—É—á–µ–Ω–æ:  %s%n", toBinaryString(result5));
                failed++;
            }
        } catch (Exception e) {
            System.out.println("‚úó –¢–µ—Å—Ç 5: FAILED —Å –æ—à–∏–±–∫–æ–π: " + e.getMessage());
            failed++;
        }
        System.out.println();
        
        // –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ (–≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
        try {
            byte[] data6 = {(byte) 0b00001111};
            int[] pBlock6 = {8, 9, 10}; // –ò–Ω–¥–µ–∫—Å—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            BitPermutation.permutateBits(data6, pBlock6, BitIndexMode.INVERTED, true);
            System.out.println("‚úó –¢–µ—Å—Ç 6 (–≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã): FAILED - –æ—à–∏–±–∫–∞ –Ω–µ –≤—ã–±—Ä–æ—à–µ–Ω–∞");
            failed++;
        } catch (IllegalArgumentException e) {
            System.out.println("‚úì –¢–µ—Å—Ç 6 (–≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã): PASSED");
            System.out.println("  –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–æ—à–µ–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: " + e.getMessage());
            passed++;
        }
        System.out.println();
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        System.out.println("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===");
        System.out.printf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d%n", passed);
        System.out.printf("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: %d%n", failed);
        System.out.printf("–í—Å–µ–≥–æ: %d%n", passed + failed);
        
        if (failed == 0) {
            System.out.println("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        }
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –±–∞–π—Ç–æ–≤ –≤ –¥–≤–æ–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
     */
    private static String toBinaryString(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < bytes.length; i++) {
            if (i > 0) sb.append(" ");
            sb.append(String.format("0b%8s", Integer.toBinaryString(bytes[i] & 0xFF))
                      .replace(' ', '0'));
        }
        return sb.toString();
    }
}

