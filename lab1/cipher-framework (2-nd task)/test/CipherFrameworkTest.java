import java.util.Arrays;

public class CipherFrameworkTest {
    
    public static void main(String[] args) {
        System.out.println("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cipher Framework ===\n");
        
        int passed = 0;
        int failed = 0;

        passed += testPaddingZeros() ? 1 : 0;
        failed += testPaddingZeros() ? 0 : 1;

        passed += testPaddingPKCS7() ? 1 : 0;
        failed += testPaddingPKCS7() ? 0 : 1;

        passed += testPaddingANSIX923() ? 1 : 0;
        failed += testPaddingANSIX923() ? 0 : 1;

        passed += testECBMode() ? 1 : 0;
        failed += testECBMode() ? 0 : 1;

        passed += testCBCMode() ? 1 : 0;
        failed += testCBCMode() ? 0 : 1;

        passed += testEncryptDecrypt() ? 1 : 0;
        failed += testEncryptDecrypt() ? 0 : 1;

        passed += testAsyncEncryption() ? 1 : 0;
        failed += testAsyncEncryption() ? 0 : 1;

        System.out.println("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===");
        System.out.printf("–ü—Ä–æ–π–¥–µ–Ω–æ: %d%n", passed);
        System.out.printf("–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: %d%n", failed);
        System.out.printf("–í—Å–µ–≥–æ: %d%n", passed + failed);
        
        if (failed == 0) {
            System.out.println("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        }
    }

    private static boolean testPaddingZeros() {
        System.out.println("–¢–µ—Å—Ç 1: Padding ZEROS");
        try {
            byte[] data = {1, 2, 3, 4, 5};
            byte[] padded = PaddingMode.ZEROS.pad(data, 8);
            
            if (padded.length != 8) {
                System.out.println("‚úó FAILED: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–±–∏–≤–∫–∏");
                return false;
            }

            byte[] unpadded = PaddingMode.ZEROS.unpad(padded, 8);
            if (!Arrays.equals(data, unpadded)) {
                System.out.println("‚úó FAILED: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ unpad");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testPaddingPKCS7() {
        System.out.println("–¢–µ—Å—Ç 2: Padding PKCS7");
        try {
            byte[] data = {1, 2, 3, 4, 5};
            byte[] padded = PaddingMode.PKCS7.pad(data, 8);
            
            if (padded.length != 8) {
                System.out.println("‚úó FAILED: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–±–∏–≤–∫–∏");
                return false;
            }

            if (padded[7] != 3) {
                System.out.println("‚úó FAILED: –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–±–∏–≤–∫–∏");
                return false;
            }

            byte[] unpadded = PaddingMode.PKCS7.unpad(padded, 8);
            if (!Arrays.equals(data, unpadded)) {
                System.out.println("‚úó FAILED: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ unpad");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testPaddingANSIX923() {
        System.out.println("–¢–µ—Å—Ç 3: Padding ANSI X.923");
        try {
            byte[] data = {1, 2, 3, 4, 5};
            byte[] padded = PaddingMode.ANSI_X923.pad(data, 8);
            
            if (padded.length != 8) {
                System.out.println("‚úó FAILED: –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–±–∏–≤–∫–∏");
                return false;
            }

            byte[] unpadded = PaddingMode.ANSI_X923.unpad(padded, 8);
            if (!Arrays.equals(data, unpadded)) {
                System.out.println("‚úó FAILED: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ—Å–ª–µ unpad");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testECBMode() {
        System.out.println("–¢–µ—Å—Ç 4: ECB —Ä–µ–∂–∏–º");
        try {
            byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
            DummyCipher cipher = new DummyCipher();
            cipher.setEncryptionKey(key);
            cipher.setDecryptionKey(key);

            byte[] plaintext = "12345678".getBytes();
            
            CipherContext ctx = new CipherContext(cipher, CipherMode.ECB, PaddingMode.PKCS7, 8);
            
            byte[] encrypted = ctx.encryptAsync(plaintext).join();
            byte[] decrypted = ctx.decryptAsync(encrypted).join();
            
            ctx.shutdown();

            if (!Arrays.equals(plaintext, decrypted)) {
                System.out.println("‚úó FAILED: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            e.printStackTrace();
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testCBCMode() {
        System.out.println("–¢–µ—Å—Ç 5: CBC —Ä–µ–∂–∏–º");
        try {
            byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
            byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0};
            
            DummyCipher cipher = new DummyCipher();
            cipher.setEncryptionKey(key);
            cipher.setDecryptionKey(key);

            byte[] plaintext = "Test CBC Mode".getBytes();
            
            CipherContext ctx = new CipherContext(cipher, CipherMode.CBC, PaddingMode.PKCS7, 8, iv);
            
            byte[] encrypted = ctx.encryptAsync(plaintext).join();
            byte[] decrypted = ctx.decryptAsync(encrypted).join();
            
            ctx.shutdown();

            if (!Arrays.equals(plaintext, decrypted)) {
                System.out.println("‚úó FAILED: –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testEncryptDecrypt() {
        System.out.println("–¢–µ—Å—Ç 6: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ");
        try {
            byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
            byte[] iv = {9, 8, 7, 6, 5, 4, 3, 2};
            
            DummyCipher cipher = new DummyCipher();
            cipher.setEncryptionKey(key);
            cipher.setDecryptionKey(key);

            String original = "Hello, Cryptography!";
            byte[] plaintext = original.getBytes();
            
            CipherContext ctx = new CipherContext(cipher, CipherMode.CBC, PaddingMode.PKCS7, 8, iv);
            
            byte[] encrypted = ctx.encryptAsync(plaintext).join();
            
            if (Arrays.equals(plaintext, encrypted)) {
                System.out.println("‚úó FAILED: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏");
                ctx.shutdown();
                return false;
            }

            byte[] decrypted = ctx.decryptAsync(encrypted).join();
            String result = new String(decrypted);
            
            ctx.shutdown();

            if (!original.equals(result)) {
                System.out.println("‚úó FAILED: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
                System.out.println("  –û–∂–∏–¥–∞–ª–æ—Å—å: " + original);
                System.out.println("  –ü–æ–ª—É—á–µ–Ω–æ: " + result);
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }

    private static boolean testAsyncEncryption() {
        System.out.println("–¢–µ—Å—Ç 7: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ");
        try {
            byte[] key = {1, 2, 3, 4, 5, 6, 7, 8};
            byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0};
            
            DummyCipher cipher = new DummyCipher();
            cipher.setEncryptionKey(key);
            cipher.setDecryptionKey(key);

            byte[] plaintext = "Async test".getBytes();
            
            CipherContext ctx = new CipherContext(cipher, CipherMode.CBC, PaddingMode.PKCS7, 8, iv);
            
            byte[] encrypted = ctx.encryptAsync(plaintext).join();
            byte[] decrypted = ctx.decryptAsync(encrypted).join();
            
            ctx.shutdown();

            if (!Arrays.equals(plaintext, decrypted)) {
                System.out.println("‚úó FAILED: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                return false;
            }

            System.out.println("‚úì PASSED");
            return true;
        } catch (Exception e) {
            System.out.println("‚úó FAILED: " + e.getMessage());
            return false;
        } finally {
            System.out.println();
        }
    }
}

